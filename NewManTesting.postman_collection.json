{
	"info": {
		"_postman_id": "0a7b30ca-1c13-45bf-8c79-5c06014a6754",
		"name": "NewManTesting",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33960707"
	},
	"item": [
		{
			"name": "List Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to verify the response status code",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Test to verify the response body structure",
							"pm.test(\"Response body has the expected structure\", function () {",
							"    pm.expect(pm.response.json()).to.have.property('page');",
							"    pm.expect(pm.response.json()).to.have.property('per_page');",
							"    pm.expect(pm.response.json()).to.have.property('total');",
							"    pm.expect(pm.response.json()).to.have.property('total_pages');",
							"    pm.expect(pm.response.json()).to.have.property('data').and.to.be.an('array');",
							"    pm.expect(pm.response.json().data).to.be.an('array').that.is.not.empty;",
							"    pm.expect(pm.response.json()).to.have.property('support').and.to.be.an('object');",
							"});",
							"",
							"// Test to verify the content of individual data objects",
							"pm.test(\"Each data object has the expected properties\", function () {",
							"    var data = pm.response.json().data;",
							"    data.forEach(function (item) {",
							"        pm.expect(item).to.have.property('id');",
							"        pm.expect(item).to.have.property('email');",
							"        pm.expect(item).to.have.property('first_name');",
							"        pm.expect(item).to.have.property('last_name');",
							"        pm.expect(item).to.have.property('avatar');",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/users?page=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Single User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to verify the response status code",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Test to verify the response body structure",
							"pm.test(\"Response body has the expected structure\", function () {",
							"    pm.expect(pm.response.json()).to.have.property('data').and.to.be.an('object');",
							"    pm.expect(pm.response.json()).to.have.property('support').and.to.be.an('object');",
							"});",
							"",
							"// Test to verify the content of the 'data' object",
							"pm.test(\"The 'data' object has the expected properties\", function () {",
							"    var data = pm.response.json().data;",
							"    pm.expect(data).to.have.property('id').and.to.be.a('number');",
							"    pm.expect(data).to.have.property('email').and.to.be.a('string');",
							"    pm.expect(data).to.have.property('first_name').and.to.be.a('string');",
							"    pm.expect(data).to.have.property('last_name').and.to.be.a('string');",
							"    pm.expect(data).to.have.property('avatar').and.to.be.a('string');",
							"});",
							"",
							"// Test to verify the content of the 'support' object",
							"pm.test(\"The 'support' object has the expected properties\", function () {",
							"    var support = pm.response.json().support;",
							"    pm.expect(support).to.have.property('url').and.to.be.a('string');",
							"    pm.expect(support).to.have.property('text').and.to.be.a('string');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single user not found",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/users/23",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "List Resource",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/unknown",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"unknown"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single resource not found",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/unknown/23",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"unknown",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to verify the response status code",
							"pm.test(\"Status code is 201 Created\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// Test to verify the response body structure and content",
							"pm.test(\"Response body matches expected data\", function () {",
							"    pm.expect(pm.response.json()).to.deep.include({",
							"        \"name\": \"morpheus\",",
							"        \"job\": \"leader\"",
							"    });",
							"    pm.expect(pm.response.json()).to.have.property(\"createdAt\").and.to.match(/^2024-03-30T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"leader\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update PUT",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Successful",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"pistol\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Unsuccessful",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"eve.holt@reqres.in\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Successful",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"cityslicka\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Unsuccessful",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"eve.holt@reqres.in\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		}
	]
}